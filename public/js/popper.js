/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/modules/popper.js":
/*!********************************************!*\
  !*** ./resources/assets/modules/popper.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n Copyright (C) Federico Zivolo 2017\n Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n(function (e, t) {\n  'object' == ( false ? 0 : _typeof(exports)) && 'undefined' != \"object\" ? module.exports = t() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n})(this, function () {\n  'use strict';\n\n  function e(e) {\n    return e && '[object Function]' === {}.toString.call(e);\n  }\n\n  function t(e, t) {\n    if (1 !== e.nodeType) return [];\n    var o = getComputedStyle(e, null);\n    return t ? o[t] : o;\n  }\n\n  function o(e) {\n    return 'HTML' === e.nodeName ? e : e.parentNode || e.host;\n  }\n\n  function n(e) {\n    if (!e) return document.body;\n\n    switch (e.nodeName) {\n      case 'HTML':\n      case 'BODY':\n        return e.ownerDocument.body;\n\n      case '#document':\n        return e.body;\n    }\n\n    var i = t(e),\n        r = i.overflow,\n        p = i.overflowX,\n        s = i.overflowY;\n    return /(auto|scroll)/.test(r + s + p) ? e : n(o(e));\n  }\n\n  function r(e) {\n    var o = e && e.offsetParent,\n        i = o && o.nodeName;\n    return i && 'BODY' !== i && 'HTML' !== i ? -1 !== ['TD', 'TABLE'].indexOf(o.nodeName) && 'static' === t(o, 'position') ? r(o) : o : e ? e.ownerDocument.documentElement : document.documentElement;\n  }\n\n  function p(e) {\n    var t = e.nodeName;\n    return 'BODY' !== t && ('HTML' === t || r(e.firstElementChild) === e);\n  }\n\n  function s(e) {\n    return null === e.parentNode ? e : s(e.parentNode);\n  }\n\n  function d(e, t) {\n    if (!e || !e.nodeType || !t || !t.nodeType) return document.documentElement;\n    var o = e.compareDocumentPosition(t) & Node.DOCUMENT_POSITION_FOLLOWING,\n        i = o ? e : t,\n        n = o ? t : e,\n        a = document.createRange();\n    a.setStart(i, 0), a.setEnd(n, 0);\n    var l = a.commonAncestorContainer;\n    if (e !== l && t !== l || i.contains(n)) return p(l) ? l : r(l);\n    var f = s(e);\n    return f.host ? d(f.host, t) : d(e, s(t).host);\n  }\n\n  function a(e) {\n    var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 'top',\n        o = 'top' === t ? 'scrollTop' : 'scrollLeft',\n        i = e.nodeName;\n\n    if ('BODY' === i || 'HTML' === i) {\n      var n = e.ownerDocument.documentElement,\n          r = e.ownerDocument.scrollingElement || n;\n      return r[o];\n    }\n\n    return e[o];\n  }\n\n  function l(e, t) {\n    var o = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],\n        i = a(t, 'top'),\n        n = a(t, 'left'),\n        r = o ? -1 : 1;\n    return e.top += i * r, e.bottom += i * r, e.left += n * r, e.right += n * r, e;\n  }\n\n  function f(e, t) {\n    var o = 'x' === t ? 'Left' : 'Top',\n        i = 'Left' == o ? 'Right' : 'Bottom';\n    return parseFloat(e['border' + o + 'Width'], 10) + parseFloat(e['border' + i + 'Width'], 10);\n  }\n\n  function m(e, t, o, i) {\n    return J(t['offset' + e], t['scroll' + e], o['client' + e], o['offset' + e], o['scroll' + e], ie() ? o['offset' + e] + i['margin' + ('Height' === e ? 'Top' : 'Left')] + i['margin' + ('Height' === e ? 'Bottom' : 'Right')] : 0);\n  }\n\n  function h() {\n    var e = document.body,\n        t = document.documentElement,\n        o = ie() && getComputedStyle(t);\n    return {\n      height: m('Height', e, t, o),\n      width: m('Width', e, t, o)\n    };\n  }\n\n  function c(e) {\n    return se({}, e, {\n      right: e.left + e.width,\n      bottom: e.top + e.height\n    });\n  }\n\n  function g(e) {\n    var o = {};\n    if (ie()) try {\n      o = e.getBoundingClientRect();\n      var i = a(e, 'top'),\n          n = a(e, 'left');\n      o.top += i, o.left += n, o.bottom += i, o.right += n;\n    } catch (e) {} else o = e.getBoundingClientRect();\n    var r = {\n      left: o.left,\n      top: o.top,\n      width: o.right - o.left,\n      height: o.bottom - o.top\n    },\n        p = 'HTML' === e.nodeName ? h() : {},\n        s = p.width || e.clientWidth || r.right - r.left,\n        d = p.height || e.clientHeight || r.bottom - r.top,\n        l = e.offsetWidth - s,\n        m = e.offsetHeight - d;\n\n    if (l || m) {\n      var g = t(e);\n      l -= f(g, 'x'), m -= f(g, 'y'), r.width -= l, r.height -= m;\n    }\n\n    return c(r);\n  }\n\n  function u(e, o) {\n    var i = ie(),\n        r = 'HTML' === o.nodeName,\n        p = g(e),\n        s = g(o),\n        d = n(e),\n        a = t(o),\n        f = parseFloat(a.borderTopWidth, 10),\n        m = parseFloat(a.borderLeftWidth, 10),\n        h = c({\n      top: p.top - s.top - f,\n      left: p.left - s.left - m,\n      width: p.width,\n      height: p.height\n    });\n\n    if (h.marginTop = 0, h.marginLeft = 0, !i && r) {\n      var u = parseFloat(a.marginTop, 10),\n          b = parseFloat(a.marginLeft, 10);\n      h.top -= f - u, h.bottom -= f - u, h.left -= m - b, h.right -= m - b, h.marginTop = u, h.marginLeft = b;\n    }\n\n    return (i ? o.contains(d) : o === d && 'BODY' !== d.nodeName) && (h = l(h, o)), h;\n  }\n\n  function b(e) {\n    var t = e.ownerDocument.documentElement,\n        o = u(e, t),\n        i = J(t.clientWidth, window.innerWidth || 0),\n        n = J(t.clientHeight, window.innerHeight || 0),\n        r = a(t),\n        p = a(t, 'left'),\n        s = {\n      top: r - o.top + o.marginTop,\n      left: p - o.left + o.marginLeft,\n      width: i,\n      height: n\n    };\n    return c(s);\n  }\n\n  function w(e) {\n    var i = e.nodeName;\n    return 'BODY' === i || 'HTML' === i ? !1 : 'fixed' === t(e, 'position') || w(o(e));\n  }\n\n  function y(e, t, i, r) {\n    var p = {\n      top: 0,\n      left: 0\n    },\n        s = d(e, t);\n    if ('viewport' === r) p = b(s);else {\n      var a;\n      'scrollParent' === r ? (a = n(o(t)), 'BODY' === a.nodeName && (a = e.ownerDocument.documentElement)) : 'window' === r ? a = e.ownerDocument.documentElement : a = r;\n      var l = u(a, s);\n\n      if ('HTML' === a.nodeName && !w(s)) {\n        var f = h(),\n            m = f.height,\n            c = f.width;\n        p.top += l.top - l.marginTop, p.bottom = m + l.top, p.left += l.left - l.marginLeft, p.right = c + l.left;\n      } else p = l;\n    }\n    return p.left += i, p.top += i, p.right -= i, p.bottom -= i, p;\n  }\n\n  function E(e) {\n    var t = e.width,\n        o = e.height;\n    return t * o;\n  }\n\n  function v(e, t, o, i, n) {\n    var r = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : 0;\n    if (-1 === e.indexOf('auto')) return e;\n    var p = y(o, i, r, n),\n        s = {\n      top: {\n        width: p.width,\n        height: t.top - p.top\n      },\n      right: {\n        width: p.right - t.right,\n        height: p.height\n      },\n      bottom: {\n        width: p.width,\n        height: p.bottom - t.bottom\n      },\n      left: {\n        width: t.left - p.left,\n        height: p.height\n      }\n    },\n        d = Object.keys(s).map(function (e) {\n      return se({\n        key: e\n      }, s[e], {\n        area: E(s[e])\n      });\n    }).sort(function (e, t) {\n      return t.area - e.area;\n    }),\n        a = d.filter(function (e) {\n      var t = e.width,\n          i = e.height;\n      return t >= o.clientWidth && i >= o.clientHeight;\n    }),\n        l = 0 < a.length ? a[0].key : d[0].key,\n        f = e.split('-')[1];\n    return l + (f ? '-' + f : '');\n  }\n\n  function O(e, t, o) {\n    var i = d(t, o);\n    return u(o, i);\n  }\n\n  function L(e) {\n    var t = getComputedStyle(e),\n        o = parseFloat(t.marginTop) + parseFloat(t.marginBottom),\n        i = parseFloat(t.marginLeft) + parseFloat(t.marginRight),\n        n = {\n      width: e.offsetWidth + i,\n      height: e.offsetHeight + o\n    };\n    return n;\n  }\n\n  function x(e) {\n    var t = {\n      left: 'right',\n      right: 'left',\n      bottom: 'top',\n      top: 'bottom'\n    };\n    return e.replace(/left|right|bottom|top/g, function (e) {\n      return t[e];\n    });\n  }\n\n  function S(e, t, o) {\n    o = o.split('-')[0];\n    var i = L(e),\n        n = {\n      width: i.width,\n      height: i.height\n    },\n        r = -1 !== ['right', 'left'].indexOf(o),\n        p = r ? 'top' : 'left',\n        s = r ? 'left' : 'top',\n        d = r ? 'height' : 'width',\n        a = r ? 'width' : 'height';\n    return n[p] = t[p] + t[d] / 2 - i[d] / 2, n[s] = o === s ? t[s] - i[a] : t[x(s)], n;\n  }\n\n  function T(e, t) {\n    return Array.prototype.find ? e.find(t) : e.filter(t)[0];\n  }\n\n  function D(e, t, o) {\n    if (Array.prototype.findIndex) return e.findIndex(function (e) {\n      return e[t] === o;\n    });\n    var i = T(e, function (e) {\n      return e[t] === o;\n    });\n    return e.indexOf(i);\n  }\n\n  function C(t, o, i) {\n    var n = void 0 === i ? t : t.slice(0, D(t, 'name', i));\n    return n.forEach(function (t) {\n      t['function'] && console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n      var i = t['function'] || t.fn;\n      t.enabled && e(i) && (o.offsets.popper = c(o.offsets.popper), o.offsets.reference = c(o.offsets.reference), o = i(o, t));\n    }), o;\n  }\n\n  function N() {\n    if (!this.state.isDestroyed) {\n      var e = {\n        instance: this,\n        styles: {},\n        arrowStyles: {},\n        attributes: {},\n        flipped: !1,\n        offsets: {}\n      };\n      e.offsets.reference = O(this.state, this.popper, this.reference), e.placement = v(this.options.placement, e.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), e.originalPlacement = e.placement, e.offsets.popper = S(this.popper, e.offsets.reference, e.placement), e.offsets.popper.position = 'absolute', e = C(this.modifiers, e), this.state.isCreated ? this.options.onUpdate(e) : (this.state.isCreated = !0, this.options.onCreate(e));\n    }\n  }\n\n  function k(e, t) {\n    return e.some(function (e) {\n      var o = e.name,\n          i = e.enabled;\n      return i && o === t;\n    });\n  }\n\n  function W(e) {\n    for (var t = [!1, 'ms', 'Webkit', 'Moz', 'O'], o = e.charAt(0).toUpperCase() + e.slice(1), n = 0; n < t.length - 1; n++) {\n      var i = t[n],\n          r = i ? '' + i + o : e;\n      if ('undefined' != typeof document.body.style[r]) return r;\n    }\n\n    return null;\n  }\n\n  function P() {\n    return this.state.isDestroyed = !0, k(this.modifiers, 'applyStyle') && (this.popper.removeAttribute('x-placement'), this.popper.style.left = '', this.popper.style.position = '', this.popper.style.top = '', this.popper.style[W('transform')] = ''), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this;\n  }\n\n  function B(e) {\n    var t = e.ownerDocument;\n    return t ? t.defaultView : window;\n  }\n\n  function H(e, t, o, i) {\n    var r = 'BODY' === e.nodeName,\n        p = r ? e.ownerDocument.defaultView : e;\n    p.addEventListener(t, o, {\n      passive: !0\n    }), r || H(n(p.parentNode), t, o, i), i.push(p);\n  }\n\n  function A(e, t, o, i) {\n    o.updateBound = i, B(e).addEventListener('resize', o.updateBound, {\n      passive: !0\n    });\n    var r = n(e);\n    return H(r, 'scroll', o.updateBound, o.scrollParents), o.scrollElement = r, o.eventsEnabled = !0, o;\n  }\n\n  function I() {\n    this.state.eventsEnabled || (this.state = A(this.reference, this.options, this.state, this.scheduleUpdate));\n  }\n\n  function M(e, t) {\n    return B(e).removeEventListener('resize', t.updateBound), t.scrollParents.forEach(function (e) {\n      e.removeEventListener('scroll', t.updateBound);\n    }), t.updateBound = null, t.scrollParents = [], t.scrollElement = null, t.eventsEnabled = !1, t;\n  }\n\n  function R() {\n    this.state.eventsEnabled && (cancelAnimationFrame(this.scheduleUpdate), this.state = M(this.reference, this.state));\n  }\n\n  function U(e) {\n    return '' !== e && !isNaN(parseFloat(e)) && isFinite(e);\n  }\n\n  function Y(e, t) {\n    Object.keys(t).forEach(function (o) {\n      var i = '';\n      -1 !== ['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(o) && U(t[o]) && (i = 'px'), e.style[o] = t[o] + i;\n    });\n  }\n\n  function j(e, t) {\n    Object.keys(t).forEach(function (o) {\n      var i = t[o];\n      !1 === i ? e.removeAttribute(o) : e.setAttribute(o, t[o]);\n    });\n  }\n\n  function F(e, t, o) {\n    var i = T(e, function (e) {\n      var o = e.name;\n      return o === t;\n    }),\n        n = !!i && e.some(function (e) {\n      return e.name === o && e.enabled && e.order < i.order;\n    });\n\n    if (!n) {\n      var r = '`' + t + '`';\n      console.warn('`' + o + '`' + ' modifier is required by ' + r + ' modifier in order to work, be sure to include it before ' + r + '!');\n    }\n\n    return n;\n  }\n\n  function K(e) {\n    return 'end' === e ? 'start' : 'start' === e ? 'end' : e;\n  }\n\n  function q(e) {\n    var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],\n        o = ae.indexOf(e),\n        i = ae.slice(o + 1).concat(ae.slice(0, o));\n    return t ? i.reverse() : i;\n  }\n\n  function V(e, t, o, i) {\n    var n = e.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/),\n        r = +n[1],\n        p = n[2];\n    if (!r) return e;\n\n    if (0 === p.indexOf('%')) {\n      var s;\n\n      switch (p) {\n        case '%p':\n          s = o;\n          break;\n\n        case '%':\n        case '%r':\n        default:\n          s = i;\n      }\n\n      var d = c(s);\n      return d[t] / 100 * r;\n    }\n\n    if ('vh' === p || 'vw' === p) {\n      var a;\n      return a = 'vh' === p ? J(document.documentElement.clientHeight, window.innerHeight || 0) : J(document.documentElement.clientWidth, window.innerWidth || 0), a / 100 * r;\n    }\n\n    return r;\n  }\n\n  function z(e, t, o, i) {\n    var n = [0, 0],\n        r = -1 !== ['right', 'left'].indexOf(i),\n        p = e.split(/(\\+|\\-)/).map(function (e) {\n      return e.trim();\n    }),\n        s = p.indexOf(T(p, function (e) {\n      return -1 !== e.search(/,|\\s/);\n    }));\n    p[s] && -1 === p[s].indexOf(',') && console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n    var d = /\\s*,\\s*|\\s+/,\n        a = -1 === s ? [p] : [p.slice(0, s).concat([p[s].split(d)[0]]), [p[s].split(d)[1]].concat(p.slice(s + 1))];\n    return a = a.map(function (e, i) {\n      var n = (1 === i ? !r : r) ? 'height' : 'width',\n          p = !1;\n      return e.reduce(function (e, t) {\n        return '' === e[e.length - 1] && -1 !== ['+', '-'].indexOf(t) ? (e[e.length - 1] = t, p = !0, e) : p ? (e[e.length - 1] += t, p = !1, e) : e.concat(t);\n      }, []).map(function (e) {\n        return V(e, n, t, o);\n      });\n    }), a.forEach(function (e, t) {\n      e.forEach(function (o, i) {\n        U(o) && (n[t] += o * ('-' === e[i - 1] ? -1 : 1));\n      });\n    }), n;\n  }\n\n  function G(e, t) {\n    var o,\n        i = t.offset,\n        n = e.placement,\n        r = e.offsets,\n        p = r.popper,\n        s = r.reference,\n        d = n.split('-')[0];\n    return o = U(+i) ? [+i, 0] : z(i, p, s, d), 'left' === d ? (p.top += o[0], p.left -= o[1]) : 'right' === d ? (p.top += o[0], p.left += o[1]) : 'top' === d ? (p.left += o[0], p.top -= o[1]) : 'bottom' === d && (p.left += o[0], p.top += o[1]), e.popper = p, e;\n  }\n\n  for (var _ = Math.min, X = Math.floor, J = Math.max, Q = 'undefined' != typeof window && 'undefined' != typeof document, Z = ['Edge', 'Trident', 'Firefox'], $ = 0, ee = 0; ee < Z.length; ee += 1) {\n    if (Q && 0 <= navigator.userAgent.indexOf(Z[ee])) {\n      $ = 1;\n      break;\n    }\n  }\n\n  var i,\n      te = Q && window.Promise,\n      oe = te ? function (e) {\n    var t = !1;\n    return function () {\n      t || (t = !0, window.Promise.resolve().then(function () {\n        t = !1, e();\n      }));\n    };\n  } : function (e) {\n    var t = !1;\n    return function () {\n      t || (t = !0, setTimeout(function () {\n        t = !1, e();\n      }, $));\n    };\n  },\n      ie = function ie() {\n    return void 0 == i && (i = -1 !== navigator.appVersion.indexOf('MSIE 10')), i;\n  },\n      ne = function ne(e, t) {\n    if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function');\n  },\n      re = function () {\n    function e(e, t) {\n      for (var o, n = 0; n < t.length; n++) {\n        o = t[n], o.enumerable = o.enumerable || !1, o.configurable = !0, 'value' in o && (o.writable = !0), Object.defineProperty(e, o.key, o);\n      }\n    }\n\n    return function (t, o, i) {\n      return o && e(t.prototype, o), i && e(t, i), t;\n    };\n  }(),\n      pe = function pe(e, t, o) {\n    return t in e ? Object.defineProperty(e, t, {\n      value: o,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[t] = o, e;\n  },\n      se = Object.assign || function (e) {\n    for (var t, o = 1; o < arguments.length; o++) {\n      for (var i in t = arguments[o], t) {\n        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);\n      }\n    }\n\n    return e;\n  },\n      de = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'],\n      ae = de.slice(3),\n      le = {\n    FLIP: 'flip',\n    CLOCKWISE: 'clockwise',\n    COUNTERCLOCKWISE: 'counterclockwise'\n  },\n      fe = function () {\n    function t(o, i) {\n      var n = this,\n          r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};\n      ne(this, t), this.scheduleUpdate = function () {\n        return requestAnimationFrame(n.update);\n      }, this.update = oe(this.update.bind(this)), this.options = se({}, t.Defaults, r), this.state = {\n        isDestroyed: !1,\n        isCreated: !1,\n        scrollParents: []\n      }, this.reference = o && o.jquery ? o[0] : o, this.popper = i && i.jquery ? i[0] : i, this.options.modifiers = {}, Object.keys(se({}, t.Defaults.modifiers, r.modifiers)).forEach(function (e) {\n        n.options.modifiers[e] = se({}, t.Defaults.modifiers[e] || {}, r.modifiers ? r.modifiers[e] : {});\n      }), this.modifiers = Object.keys(this.options.modifiers).map(function (e) {\n        return se({\n          name: e\n        }, n.options.modifiers[e]);\n      }).sort(function (e, t) {\n        return e.order - t.order;\n      }), this.modifiers.forEach(function (t) {\n        t.enabled && e(t.onLoad) && t.onLoad(n.reference, n.popper, n.options, t, n.state);\n      }), this.update();\n      var p = this.options.eventsEnabled;\n      p && this.enableEventListeners(), this.state.eventsEnabled = p;\n    }\n\n    return re(t, [{\n      key: 'update',\n      value: function value() {\n        return N.call(this);\n      }\n    }, {\n      key: 'destroy',\n      value: function value() {\n        return P.call(this);\n      }\n    }, {\n      key: 'enableEventListeners',\n      value: function value() {\n        return I.call(this);\n      }\n    }, {\n      key: 'disableEventListeners',\n      value: function value() {\n        return R.call(this);\n      }\n    }]), t;\n  }();\n\n  return fe.Utils = ('undefined' == typeof window ? __webpack_require__.g : window).PopperUtils, fe.placements = de, fe.Defaults = {\n    placement: 'bottom',\n    eventsEnabled: !0,\n    removeOnDestroy: !1,\n    onCreate: function onCreate() {},\n    onUpdate: function onUpdate() {},\n    modifiers: {\n      shift: {\n        order: 100,\n        enabled: !0,\n        fn: function fn(e) {\n          var t = e.placement,\n              o = t.split('-')[0],\n              i = t.split('-')[1];\n\n          if (i) {\n            var n = e.offsets,\n                r = n.reference,\n                p = n.popper,\n                s = -1 !== ['bottom', 'top'].indexOf(o),\n                d = s ? 'left' : 'top',\n                a = s ? 'width' : 'height',\n                l = {\n              start: pe({}, d, r[d]),\n              end: pe({}, d, r[d] + r[a] - p[a])\n            };\n            e.offsets.popper = se({}, p, l[i]);\n          }\n\n          return e;\n        }\n      },\n      offset: {\n        order: 200,\n        enabled: !0,\n        fn: G,\n        offset: 0\n      },\n      preventOverflow: {\n        order: 300,\n        enabled: !0,\n        fn: function fn(e, t) {\n          var o = t.boundariesElement || r(e.instance.popper);\n          e.instance.reference === o && (o = r(o));\n          var i = y(e.instance.popper, e.instance.reference, t.padding, o);\n          t.boundaries = i;\n          var n = t.priority,\n              p = e.offsets.popper,\n              s = {\n            primary: function primary(e) {\n              var o = p[e];\n              return p[e] < i[e] && !t.escapeWithReference && (o = J(p[e], i[e])), pe({}, e, o);\n            },\n            secondary: function secondary(e) {\n              var o = 'right' === e ? 'left' : 'top',\n                  n = p[o];\n              return p[e] > i[e] && !t.escapeWithReference && (n = _(p[o], i[e] - ('right' === e ? p.width : p.height))), pe({}, o, n);\n            }\n          };\n          return n.forEach(function (e) {\n            var t = -1 === ['left', 'top'].indexOf(e) ? 'secondary' : 'primary';\n            p = se({}, p, s[t](e));\n          }), e.offsets.popper = p, e;\n        },\n        priority: ['left', 'right', 'top', 'bottom'],\n        padding: 5,\n        boundariesElement: 'scrollParent'\n      },\n      keepTogether: {\n        order: 400,\n        enabled: !0,\n        fn: function fn(e) {\n          var t = e.offsets,\n              o = t.popper,\n              i = t.reference,\n              n = e.placement.split('-')[0],\n              r = X,\n              p = -1 !== ['top', 'bottom'].indexOf(n),\n              s = p ? 'right' : 'bottom',\n              d = p ? 'left' : 'top',\n              a = p ? 'width' : 'height';\n          return o[s] < r(i[d]) && (e.offsets.popper[d] = r(i[d]) - o[a]), o[d] > r(i[s]) && (e.offsets.popper[d] = r(i[s])), e;\n        }\n      },\n      arrow: {\n        order: 500,\n        enabled: !0,\n        fn: function fn(e, o) {\n          var i;\n          if (!F(e.instance.modifiers, 'arrow', 'keepTogether')) return e;\n          var n = o.element;\n\n          if ('string' == typeof n) {\n            if (n = e.instance.popper.querySelector(n), !n) return e;\n          } else if (!e.instance.popper.contains(n)) return console.warn('WARNING: `arrow.element` must be child of its popper element!'), e;\n\n          var r = e.placement.split('-')[0],\n              p = e.offsets,\n              s = p.popper,\n              d = p.reference,\n              a = -1 !== ['left', 'right'].indexOf(r),\n              l = a ? 'height' : 'width',\n              f = a ? 'Top' : 'Left',\n              m = f.toLowerCase(),\n              h = a ? 'left' : 'top',\n              g = a ? 'bottom' : 'right',\n              u = L(n)[l];\n          d[g] - u < s[m] && (e.offsets.popper[m] -= s[m] - (d[g] - u)), d[m] + u > s[g] && (e.offsets.popper[m] += d[m] + u - s[g]), e.offsets.popper = c(e.offsets.popper);\n          var b = d[m] + d[l] / 2 - u / 2,\n              w = t(e.instance.popper),\n              y = parseFloat(w['margin' + f], 10),\n              E = parseFloat(w['border' + f + 'Width'], 10),\n              v = b - e.offsets.popper[m] - y - E;\n          return v = J(_(s[l] - u, v), 0), e.arrowElement = n, e.offsets.arrow = (i = {}, pe(i, m, Math.round(v)), pe(i, h, ''), i), e;\n        },\n        element: '[x-arrow]'\n      },\n      flip: {\n        order: 600,\n        enabled: !0,\n        fn: function fn(e, t) {\n          if (k(e.instance.modifiers, 'inner')) return e;\n          if (e.flipped && e.placement === e.originalPlacement) return e;\n          var o = y(e.instance.popper, e.instance.reference, t.padding, t.boundariesElement),\n              i = e.placement.split('-')[0],\n              n = x(i),\n              r = e.placement.split('-')[1] || '',\n              p = [];\n\n          switch (t.behavior) {\n            case le.FLIP:\n              p = [i, n];\n              break;\n\n            case le.CLOCKWISE:\n              p = q(i);\n              break;\n\n            case le.COUNTERCLOCKWISE:\n              p = q(i, !0);\n              break;\n\n            default:\n              p = t.behavior;\n          }\n\n          return p.forEach(function (s, d) {\n            if (i !== s || p.length === d + 1) return e;\n            i = e.placement.split('-')[0], n = x(i);\n            var a = e.offsets.popper,\n                l = e.offsets.reference,\n                f = X,\n                m = 'left' === i && f(a.right) > f(l.left) || 'right' === i && f(a.left) < f(l.right) || 'top' === i && f(a.bottom) > f(l.top) || 'bottom' === i && f(a.top) < f(l.bottom),\n                h = f(a.left) < f(o.left),\n                c = f(a.right) > f(o.right),\n                g = f(a.top) < f(o.top),\n                u = f(a.bottom) > f(o.bottom),\n                b = 'left' === i && h || 'right' === i && c || 'top' === i && g || 'bottom' === i && u,\n                w = -1 !== ['top', 'bottom'].indexOf(i),\n                y = !!t.flipVariations && (w && 'start' === r && h || w && 'end' === r && c || !w && 'start' === r && g || !w && 'end' === r && u);\n            (m || b || y) && (e.flipped = !0, (m || b) && (i = p[d + 1]), y && (r = K(r)), e.placement = i + (r ? '-' + r : ''), e.offsets.popper = se({}, e.offsets.popper, S(e.instance.popper, e.offsets.reference, e.placement)), e = C(e.instance.modifiers, e, 'flip'));\n          }), e;\n        },\n        behavior: 'flip',\n        padding: 5,\n        boundariesElement: 'viewport'\n      },\n      inner: {\n        order: 700,\n        enabled: !1,\n        fn: function fn(e) {\n          var t = e.placement,\n              o = t.split('-')[0],\n              i = e.offsets,\n              n = i.popper,\n              r = i.reference,\n              p = -1 !== ['left', 'right'].indexOf(o),\n              s = -1 === ['top', 'left'].indexOf(o);\n          return n[p ? 'left' : 'top'] = r[o] - (s ? n[p ? 'width' : 'height'] : 0), e.placement = x(t), e.offsets.popper = c(n), e;\n        }\n      },\n      hide: {\n        order: 800,\n        enabled: !0,\n        fn: function fn(e) {\n          if (!F(e.instance.modifiers, 'hide', 'preventOverflow')) return e;\n          var t = e.offsets.reference,\n              o = T(e.instance.modifiers, function (e) {\n            return 'preventOverflow' === e.name;\n          }).boundaries;\n\n          if (t.bottom < o.top || t.left > o.right || t.top > o.bottom || t.right < o.left) {\n            if (!0 === e.hide) return e;\n            e.hide = !0, e.attributes['x-out-of-boundaries'] = '';\n          } else {\n            if (!1 === e.hide) return e;\n            e.hide = !1, e.attributes['x-out-of-boundaries'] = !1;\n          }\n\n          return e;\n        }\n      },\n      computeStyle: {\n        order: 850,\n        enabled: !0,\n        fn: function fn(e, t) {\n          var o = t.x,\n              i = t.y,\n              n = e.offsets.popper,\n              p = T(e.instance.modifiers, function (e) {\n            return 'applyStyle' === e.name;\n          }).gpuAcceleration;\n          void 0 !== p && console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n          var s,\n              d,\n              a = void 0 === p ? t.gpuAcceleration : p,\n              l = r(e.instance.popper),\n              f = g(l),\n              m = {\n            position: n.position\n          },\n              h = {\n            left: X(n.left),\n            top: X(n.top),\n            bottom: X(n.bottom),\n            right: X(n.right)\n          },\n              c = 'bottom' === o ? 'top' : 'bottom',\n              u = 'right' === i ? 'left' : 'right',\n              b = W('transform');\n          if (d = 'bottom' == c ? -f.height + h.bottom : h.top, s = 'right' == u ? -f.width + h.right : h.left, a && b) m[b] = 'translate3d(' + s + 'px, ' + d + 'px, 0)', m[c] = 0, m[u] = 0, m.willChange = 'transform';else {\n            var w = 'bottom' == c ? -1 : 1,\n                y = 'right' == u ? -1 : 1;\n            m[c] = d * w, m[u] = s * y, m.willChange = c + ', ' + u;\n          }\n          var E = {\n            \"x-placement\": e.placement\n          };\n          return e.attributes = se({}, E, e.attributes), e.styles = se({}, m, e.styles), e.arrowStyles = se({}, e.offsets.arrow, e.arrowStyles), e;\n        },\n        gpuAcceleration: !0,\n        x: 'bottom',\n        y: 'right'\n      },\n      applyStyle: {\n        order: 900,\n        enabled: !0,\n        fn: function fn(e) {\n          return Y(e.instance.popper, e.styles), j(e.instance.popper, e.attributes), e.arrowElement && Object.keys(e.arrowStyles).length && Y(e.arrowElement, e.arrowStyles), e;\n        },\n        onLoad: function onLoad(e, t, o, i, n) {\n          var r = O(n, t, e),\n              p = v(o.placement, r, t, e, o.modifiers.flip.boundariesElement, o.modifiers.flip.padding);\n          return t.setAttribute('x-placement', p), Y(t, {\n            position: 'absolute'\n          }), o;\n        },\n        gpuAcceleration: void 0\n      }\n    }\n  }, fe;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/modules/popper.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/modules/popper.js");
/******/ 	
/******/ })()
;